{"version":3,"sources":["logo.svg","minigames/gugudan/Gugudan.js","minigames/wordChain/WordChain.js","minigames/Minigames.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gugudan","props","gugudanSubmit","e","preventDefault","console","log","target","value","Number","state","firstNum","lastNum","setState","result","Math","ceil","random","gugudanChang","className","title","this","onSubmit","type","vlaue","onChange","Component","WordChain","Minigames","seeGames","isActive","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,kC,yKCkD5BC,G,oCA9CX,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAQVC,cAAgB,SAACC,GACfA,EAAEC,iBACFC,QAAQC,WAAWH,EAAEI,OAAO,GAAGC,OAC5BC,OAAON,EAAEI,OAAO,GAAGC,SAAW,EAAKE,MAAMC,SAAW,EAAKD,MAAME,QAChE,EAAKC,SAAS,CACZL,MAAM,GACNM,OAAO,2CAAa,EAAKJ,MAAMC,SAAW,EAAKD,MAAME,QACrDD,SAASI,KAAKC,KAAmB,EAAdD,KAAKE,UACxBL,QAAQG,KAAKC,KAAmB,EAAdD,KAAKE,YAGzB,EAAKJ,SAAS,CACZL,MAAM,GACNM,OAAO,qCAtBO,EA0BpBI,aAAe,SAACf,GAAD,OAAQ,EAAKU,SAAS,CACnCL,MAAML,EAAEI,OAAOC,SAzBb,EAAKE,MAAM,CACTF,MAAM,GACNM,OAAO,GACPH,SAASI,KAAKC,KAAmB,EAAdD,KAAKE,UACxBL,QAAQG,KAAKC,KAAmB,EAAdD,KAAKE,WANT,E,sEA8BlB,OACE,yBAAKE,UAAU,WACb,yBAAKA,UAAU,eAAeC,MAAM,mCACjCC,KAAKX,MAAMC,SADd,6BAC8BU,KAAKX,MAAME,QADzC,YAGA,yBAAKO,UAAU,iBACb,0BAAMG,SAAUD,KAAKnB,eACnB,2BAAOqB,KAAK,SAASC,MAAOH,KAAKX,MAAMF,MAAOiB,SAAUJ,KAAKH,eAC7D,kDAGJ,yBAAKC,UAAU,kBAAkBE,KAAKX,MAAMI,a,GA1C9BY,cCWPC,E,YAXb,WAAY1B,GAAO,qEACXA,I,sEAGN,OACE,yBAAKkB,UAAU,kB,GANGO,aC6BTE,E,YAzBb,WAAY3B,GAAO,IAAD,8BAChB,4CAAMA,KAKR4B,SAAW,YACgB,IAAxB,EAAKnB,MAAMoB,SAAoB,EAAKjB,SAAS,CAACiB,UAAU,IACtD,EAAKjB,SAAS,CAACiB,UAAU,KAN5B,EAAKpB,MAAQ,CACVoB,UAAU,GAHG,E,sEAWhB,OACE,yBAAKX,UAAU,aACb,4BACE,wBAAIA,UAAU,iBACZ,wBAAIY,QAASV,KAAKQ,UAAlB,mCAAwCR,KAAKX,MAAMoB,SAAY,kBAAC,EAAD,MAAgB,IAEjF,wBAAIX,UAAU,mBACZ,wBAAIY,QAASV,KAAKQ,UAAlB,4BAAsCR,KAAKX,MAAMoB,SAAY,kBAAC,EAAD,MAAkB,U,GAnBnEJ,aCYTM,E,YAXb,WAAY/B,GAAO,qEACXA,I,sEAGN,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,W,GAPUO,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b362f975.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Gugudan.css';\r\n\r\nclass Gugudan extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        value:'',\r\n        result:'',\r\n        firstNum:Math.ceil(Math.random()*9),\r\n        lastNum:Math.ceil(Math.random()*9)\r\n      }\r\n  }\r\n  gugudanSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(typeof e.target[0].value);\r\n    if(Number(e.target[0].value) === this.state.firstNum * this.state.lastNum){\r\n      this.setState({\r\n        value:'',\r\n        result:'정답입니다. 답: '+this.state.firstNum * this.state.lastNum,\r\n        firstNum:Math.ceil(Math.random()*9),\r\n        lastNum:Math.ceil(Math.random()*9),\r\n      })\r\n    }else{\r\n      this.setState({\r\n        value:'',\r\n        result:'틀렸습니다.',\r\n      })\r\n    }\r\n  }\r\n  gugudanChang = (e) =>  this.setState({\r\n    value:e.target.value\r\n  })\r\n  render(){\r\n    return (\r\n      <div className=\"gugudan\">\r\n        <div className=\"gugudan-exam\" title=\"구구단 문제\">\r\n          {this.state.firstNum} 곱하기는 {this.state.lastNum} 는?\r\n        </div>\r\n        <div className=\"gugudan-input\">\r\n          <form onSubmit={this.gugudanSubmit}>\r\n            <input type=\"number\" vlaue={this.state.value} onChange={this.gugudanChang} />\r\n            <button>입력</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"gugudan-result\">{this.state.result}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Gugudan;\r\n","import React, { Component } from 'react';\r\n\r\nclass WordChain extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"wordChain\">\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default WordChain;\r\n","import React, { Component } from 'react';\r\nimport './Minigames.css';\r\nimport Gugudan from './gugudan/Gugudan.js';\r\nimport WordChain from './wordChain/WordChain.js';\r\n\r\nclass Minigames extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n       isActive: false\r\n    }\r\n  }\r\n  seeGames = () => {\r\n  if(this.state.isActive === false) this.setState({isActive: true});\r\n  else this.setState({isActive: false});\r\n  };\r\n  render(){\r\n    return (\r\n      <div className=\"minigames\">\r\n        <ol>\r\n          <li className=\"title-gugudan\">\r\n            <h1 onClick={this.seeGames}>구구단 게임</h1>{this.state.isActive ? (<Gugudan />) : ('')}\r\n          </li>\r\n          <li className=\"title-wordChain\">\r\n            <h1 onClick={this.seeGames}>끝말잇기</h1>{this.state.isActive ? (<WordChain />) : ('')}\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Minigames;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MinigamesModules from './minigames/Minigames.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <MinigamesModules />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}