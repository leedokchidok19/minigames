{"version":3,"sources":["minigames/gugudan/Gugudan.js","minigames/wordChain/WordChain.js","minigames/numberBaseball/NumberBaseball.js","minigames/Minigames.js","App.js","serviceWorker.js","index.js"],"names":["Gugudan","props","gugudanSubmit","e","preventDefault","console","log","target","value","Number","state","firstNum","lastNum","setState","result","Math","ceil","random","gugudanChang","className","title","this","onSubmit","type","vlaue","onChange","Component","WordChain","lastAndFirst","wordChain","inputWord","resultWord","substring","substr","length","alert","NumberBaseball","startBaseball","listNum","outputNum","i","randomNum","indexOf","push","resultNum","join","numberBaseball","throwABall","inputNum","Array","from","strike","ball","resultMsg","baseballMessage","focus","readOnly","maxLength","Minigames","seeGames","isActive","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d38b118.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Gugudan.css';\r\n\r\nclass Gugudan extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        value:'',\r\n        result:'',\r\n        firstNum:Math.ceil(Math.random()*9),\r\n        lastNum:Math.ceil(Math.random()*9)\r\n      }\r\n  }\r\n  gugudanSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(typeof e.target[0].value);\r\n    if(Number(e.target[0].value) === this.state.firstNum * this.state.lastNum){\r\n      this.setState({\r\n        value:'',\r\n        result:'정답입니다. 답: '+this.state.firstNum * this.state.lastNum,\r\n        firstNum:Math.ceil(Math.random()*9),\r\n        lastNum:Math.ceil(Math.random()*9),\r\n      })\r\n    }else{\r\n      this.setState({\r\n        value:'',\r\n        result:'틀렸습니다.',\r\n      })\r\n    }\r\n  }\r\n  gugudanChang = (e) =>  this.setState({\r\n    value:e.target.value\r\n  })\r\n  render(){\r\n    return (\r\n      <div className=\"gugudan\">\r\n        <div className=\"gugudan-exam\" title=\"구구단 문제\">\r\n          {this.state.firstNum} 곱하기는 {this.state.lastNum} 는?\r\n        </div>\r\n        <div className=\"gugudan-input\">\r\n          <form onSubmit={this.gugudanSubmit}>\r\n            <input type=\"number\" vlaue={this.state.value} onChange={this.gugudanChang} />\r\n            <button>입력</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"gugudan-result\">{this.state.result}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Gugudan;\r\n","import React, { Component } from 'react';\r\n\r\nclass WordChain extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      value:'',\r\n      result:'고구마',\r\n    }\r\n  }\r\n  lastAndFirst = (e) => this.setState({\r\n    value:e.target.value\r\n  })\r\n  wordChain = (e) =>{\r\n    e.preventDefault();\r\n//    console.log(e.target[0].value);\r\n    var inputWord = this.state.value;\r\n    var resultWord = this.state.result;\r\n    inputWord = inputWord.substring(0,1);\r\n    resultWord = resultWord.substr(resultWord.length-1);\r\n//    console.log(inputWord, resultWord);\r\n    if(inputWord === resultWord){\r\n      this.setState({\r\n        value:'',\r\n        result:this.state.value,\r\n      })\r\n    }else{\r\n      alert('다른 단어를 입력해주세요.');\r\n      this.setState({\r\n        value:'',\r\n      })\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"wordChain\">\r\n        <div className=\"wordChain-top\">{this.state.result}</div>\r\n        <div className=\"wordChain-middle\">\r\n          <form onSubmit={this.wordChain}>\r\n            <input type=\"text\" value={this.state.value} onChange={this.lastAndFirst} />\r\n            <button>입력</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default WordChain;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberBaseball extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      numberBaseball:'',\r\n      baseballMessage:'',\r\n    }\r\n  }\r\n  componentDidMount() {\r\n        this.startBaseball()\r\n    }\r\n  startBaseball = () =>{\r\n    var listNum = [1,2,3,4,5,6,7,8,9]\r\n    var outputNum = [];\r\n    for(var i=0;i<4;i++){\r\n      var randomNum = Math.ceil( (Math.random()*8 ) );\r\n//      console.log(randomNum);\r\n      if(outputNum.indexOf(randomNum+1) === -1) outputNum.push(listNum[randomNum]);\r\n      else{i--}//중복되지 않는 숫자를 배열에 추가, 중복되는 숫자일 경우 i를 감소시킨다\r\n//      console.log(outputNum.indexOf(randomNum));\r\n//      console.log(outputNum);\r\n    }\r\n    var resultNum = outputNum.join('');\r\n    this.setState({\r\n      numberBaseball:resultNum,\r\n    })\r\n//    console.log('실행 되었습니다',resultNum);\r\n  }\r\n  throwABall = (e) =>{\r\n    e.preventDefault();\r\n    var inputNum = Array.from( e.target[0].value );\r\n    var outputNum = Array.from( this.state.numberBaseball );\r\n    var strike = 0;\r\n    var ball = 0;\r\n    var resultMsg = null;\r\n    console.log(typeof outputNum[0],typeof inputNum[0]);\r\n    console.log(outputNum, inputNum);\r\n    for(var i=0;i<inputNum.length;i++){\r\n      if(inputNum[i] === outputNum[i]){\r\n        strike = strike+1;\r\n      }else if (outputNum.indexOf(inputNum[i]) > -1) {\r\n\r\n        ball = ball+1;\r\n      }//if\r\n    }//for\r\n    if(strike == inputNum.length){\r\n      resultMsg = '홈런!';\r\n      this.startBaseball();\r\n    }else{\r\n      resultMsg = strike+'스트라이크 '+ball+'볼';\r\n    }\r\n    this.setState({\r\n      baseballMessage: resultMsg,\r\n    })\r\n    e.target[0].value = '';\r\n    e.target[0].focus();\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"numberBaseball\">\r\n        <div className=\"numberBaseball-top\">\r\n          <input type=\"number\" value={this.state.numberBaseball} readOnly/>\r\n          {this.state.baseballMessage}\r\n        </div>\r\n        <div className=\"numberBaseball-middle\">\r\n          <form onSubmit={this.throwABall}>\r\n            <input type=\"text\" maxLength=\"4\" />\r\n            <button>입력</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NumberBaseball;\r\n","import React, { Component } from 'react';\r\nimport './Minigames.css';\r\nimport Gugudan from './gugudan/Gugudan.js';\r\nimport WordChain from './wordChain/WordChain.js';\r\nimport NumberBaseball from './numberBaseball/NumberBaseball.js';\r\n\r\nclass Minigames extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n       isActive: false\r\n    }\r\n  }\r\n  seeGames = () => {\r\n  if(this.state.isActive === false) this.setState({isActive: true});\r\n  else this.setState({isActive: false});\r\n  };\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"minigames\">\r\n        <ol>\r\n          <li className=\"title-gugudan\">\r\n            <h1 onClick={this.seeGames}>구구단 게임</h1>{this.state.isActive ? (<Gugudan />) : ('')}\r\n          </li>\r\n          <li className=\"title-wordChain\">\r\n            <h1 onClick={this.seeGames}>끝말잇기</h1>{this.state.isActive ? (<WordChain />) : ('')}\r\n          </li>\r\n          <li>\r\n            <h1 onClick={this.seeGames}>숫자야구</h1>{this.state.isActive ? (<NumberBaseball />) : ('')}\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Minigames;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MinigamesModules from './minigames/Minigames.js';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <MinigamesModules />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}